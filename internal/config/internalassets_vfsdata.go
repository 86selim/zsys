// Code generated by vfsgen; DO NOT EDIT.

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// internalAssets statically implements the virtual filesystem provided to vfsgen.
var internalAssets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 5, 11, 15, 9, 28, 977133714, time.UTC),
		},
		"/zsys.conf": &vfsgen۰CompressedFileInfo{
			name:             "zsys.conf",
			modTime:          time.Date(2020, 5, 11, 14, 50, 18, 511808924, time.UTC),
			uncompressedSize: 1016,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x8b\xdb\x30\x10\xc5\xef\xfe\x14\x0f\xf6\xd2\x1e\x5a\xf2\xa7\xbb\x05\xdf\x0a\x7b\x6b\xb7\xf4\x50\x28\x3d\x4e\xec\x97\x58\xc4\x92\xcc\x68\x1c\xf0\xb7\x2f\x52\x9c\x6e\xc8\xba\xd0\xf8\x64\x6b\xe6\xfd\x66\xe6\xc9\xd3\xb9\x64\x51\xa7\xba\x02\x1e\xf0\x95\x1c\x20\x86\x9e\x92\x0c\x01\x73\x10\x0c\xa6\x13\x06\x2a\xc6\xe0\x0c\x71\x0f\x73\x9e\x70\x7b\x30\xc4\xf1\xd0\x95\x93\x8e\x1e\xa2\xc4\xa0\x4c\x0c\x56\x80\x3f\x3b\x22\x6a\x4b\x45\x13\x43\xeb\xcc\xc5\x90\x13\xb1\x1b\x9b\x23\x0d\xc9\x44\x0d\x12\x5a\x30\xb4\x68\xc5\x98\xf0\x6e\xaf\xd1\xc3\xc7\x64\x50\x36\x0c\x06\x8b\x88\x7d\xcb\x64\xef\x2b\xe0\xd0\x14\x91\xec\x8d\x5a\x63\x5d\x01\x47\x72\xe8\x25\x59\x8d\xcd\x0a\x0f\x78\x71\xc1\xf9\xd1\x23\x8c\x7e\x47\xcd\x9d\xcd\x98\x64\x85\x6f\xb1\x28\x3e\x96\xfe\x00\x7c\x40\x10\xcf\x1a\xd7\xcf\x97\x9d\x33\x15\x9d\x4a\x68\x1e\x6e\xee\xf9\x22\xc3\xfc\x9d\xae\x94\xdf\xff\x96\x9c\x63\x88\x27\x6a\x11\xbb\x60\xd4\x93\xf4\xb7\xf2\x9e\xe1\x60\xdd\x99\xf1\xad\xbc\x67\x39\xa5\xe9\x2e\x1e\xb9\x80\x56\xa6\xf4\x2a\x4c\xe2\x87\x9e\x69\xa0\x9e\x33\xea\xab\xba\xad\x98\xa4\x5c\x78\x9e\x32\xab\xaf\x60\xc5\x3f\x1d\x7b\xa6\x7c\xdf\xaf\xb3\xff\x50\x9e\x5c\x1c\xd3\xb3\x4c\xd5\xcd\x70\xeb\x6a\xa9\xdd\xcb\xe9\xdb\x5e\xb6\x8b\xe0\x5f\xe4\xf1\x96\xfc\x78\x27\x79\xbd\x48\x7e\x89\xc1\xba\x5b\xf4\xa7\x45\xf4\xe7\x3b\xd1\xbf\x29\xfa\xc6\x8e\x65\x3f\xb6\xab\x3b\xd9\x9b\x0c\x4f\xff\x67\xf6\xf6\xe9\xf1\x9f\xf4\x4d\x75\x60\xa0\x4a\x9f\x2f\x34\x2f\x65\x1c\xad\xc6\xd3\xaa\xa4\x3f\xe0\x59\xe8\xf3\xca\x9d\x03\xf9\x6f\x48\xcc\x9b\x98\xaa\x3f\x01\x00\x00\xff\xff\x84\x28\xfe\x7a\xf8\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/zsys.conf"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
