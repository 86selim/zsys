# Checks codes
# We don't run tests here but on travis as we need to modprobe zfs, and so, needs a VM with the same version
# then our libzfs.

name: CI
on:
  push:
    branches:
    - master
  pull_request:
    paths-ignore:
      - '.github/workflows/update-build-containers.yaml'
      - 'po/*'

env:
  DOCKER_BUILDKIT: '1'
  DOCKER_REGISTRY: 'docker.pkg.github.com'
  TARGET_CONTAINER: 'docker.pkg.github.com/ubuntu/zsys/build-devel-golang-go'

jobs:

  quality:
    name: Code quality and mod files up to date
    runs-on: ubuntu-latest
    steps:
      # This is to workaround the lack of possible use of "container:" usage (pulling from public GPR)
      - name: Login to github docker registry
        run: echo "${GITHUB_TOKEN}" | docker login -u zsys-gha --password-stdin "${DOCKER_REGISTRY}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run image
        run: docker run -it -d -u root --name runenv -v ${GITHUB_WORKSPACE}:/workspace -w /workspace "${TARGET_CONTAINER}"
      # Checkout code
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: test
        run: |
          docker exec -u root runenv bash -c 'ls /'
          docker exec -u root runenv bash -c 'which go'
          docker exec -u root runenv bash -c 'ls -l /usr/bin/go'
          docker exec -u root runenv bash -c 'dpkg -L golang-go'
      #- name: Code formatting
      #  run: docker exec runenv bash -c 'FMT=$(go fmt ./...) && echo "$FMT" && [ -z "$FMT" ]'
      - name: Check mod files
        run: docker exec runenv bash -c ci/check-modules
      - name: Logout from github docker registry
        run: docker logout "${DOCKER_REGISTRY}"
        if: always()

  build:
    name: Build
    runs-on: ubuntu-latest
    container: docker.pkg.github.com/ubuntu/zsys:build-devel-golang-go
    steps:
      # Checkout code
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Add dependencies
      - name: Install dependencies
        run: |
          apt update
          apt install -y ca-certificates gcc libzfslinux-dev
      # Install go
      - uses: actions/setup-go@v1
        with:
          go-version: '1.13.x'
      - name: Building
        run: go build ./...

  generators:
    name: Generated files are up to date
    runs-on: ubuntu-latest
    container: docker.pkg.github.com/ubuntu/zsys:build-devel-golang-go
    steps:
      # Checkout code
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Add dependencies
      - name: Install dependencies
        run: |
          apt update
          apt install -y ca-certificates gcc libzfslinux-dev protobuf-compiler gettext
      # Install go
      - uses: actions/setup-go@v1
        with:
          go-version: '1.13.x'
      - name: Check generators
        run: go generate ./...

  extended-quality:
    name: Extended quality checks
    runs-on: ubuntu-latest
    container: docker.pkg.github.com/ubuntu/zsys:build-devel-golang-go
    steps:
      # Checkout code
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Add dependencies
      - name: Install dependencies
        run: |
          apt update
          apt install -y ca-certificates gcc libzfslinux-dev # go vet needs libzfs headers (for cgo analysis)
      # Install go
      - uses: actions/setup-go@v1
        with:
          go-version: '1.13.x'
      - name: Report suspicious constructs
        run: go vet ./...
      # TODO: add statichecks and others?

  # TODO: create a container on a schedule, with the following matrix:
  #  - ubuntu (rolling) | ubuntu (devel)
  #  - go X | go master
  # every tests with ubuntu devel and go master aren't required (can be transitive failures)
  # tests (race without race) -> travis
