// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: zsys.proto

package zsys

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{0}
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log string `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{1}
}

func (x *LogResponse) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//	*VersionResponse_Log
	//	*VersionResponse_Version
	Reply isVersionResponse_Reply `protobuf_oneof:"reply"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{2}
}

func (m *VersionResponse) GetReply() isVersionResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *VersionResponse) GetLog() string {
	if x, ok := x.GetReply().(*VersionResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *VersionResponse) GetVersion() string {
	if x, ok := x.GetReply().(*VersionResponse_Version); ok {
		return x.Version
	}
	return ""
}

type isVersionResponse_Reply interface {
	isVersionResponse_Reply()
}

type VersionResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type VersionResponse_Version struct {
	Version string `protobuf:"bytes,2,opt,name=version,proto3,oneof"`
}

func (*VersionResponse_Log) isVersionResponse_Reply() {}

func (*VersionResponse_Version) isVersionResponse_Reply() {}

type CreateUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Homepath string `protobuf:"bytes,2,opt,name=homepath,proto3" json:"homepath,omitempty"`
}

func (x *CreateUserDataRequest) Reset() {
	*x = CreateUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserDataRequest) ProtoMessage() {}

func (x *CreateUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserDataRequest.ProtoReflect.Descriptor instead.
func (*CreateUserDataRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{3}
}

func (x *CreateUserDataRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CreateUserDataRequest) GetHomepath() string {
	if x != nil {
		return x.Homepath
	}
	return ""
}

type ChangeHomeOnUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Home    string `protobuf:"bytes,1,opt,name=home,proto3" json:"home,omitempty"`
	NewHome string `protobuf:"bytes,2,opt,name=newHome,proto3" json:"newHome,omitempty"`
}

func (x *ChangeHomeOnUserDataRequest) Reset() {
	*x = ChangeHomeOnUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeHomeOnUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeHomeOnUserDataRequest) ProtoMessage() {}

func (x *ChangeHomeOnUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeHomeOnUserDataRequest.ProtoReflect.Descriptor instead.
func (*ChangeHomeOnUserDataRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{4}
}

func (x *ChangeHomeOnUserDataRequest) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *ChangeHomeOnUserDataRequest) GetNewHome() string {
	if x != nil {
		return x.NewHome
	}
	return ""
}

type DissociateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RemoveHome bool   `protobuf:"varint,2,opt,name=removeHome,proto3" json:"removeHome,omitempty"`
}

func (x *DissociateUserRequest) Reset() {
	*x = DissociateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DissociateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DissociateUserRequest) ProtoMessage() {}

func (x *DissociateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DissociateUserRequest.ProtoReflect.Descriptor instead.
func (*DissociateUserRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{5}
}

func (x *DissociateUserRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DissociateUserRequest) GetRemoveHome() bool {
	if x != nil {
		return x.RemoveHome
	}
	return false
}

type PrepareBootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//	*PrepareBootResponse_Log
	//	*PrepareBootResponse_Changed
	Reply isPrepareBootResponse_Reply `protobuf_oneof:"reply"`
}

func (x *PrepareBootResponse) Reset() {
	*x = PrepareBootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareBootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareBootResponse) ProtoMessage() {}

func (x *PrepareBootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareBootResponse.ProtoReflect.Descriptor instead.
func (*PrepareBootResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{6}
}

func (m *PrepareBootResponse) GetReply() isPrepareBootResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *PrepareBootResponse) GetLog() string {
	if x, ok := x.GetReply().(*PrepareBootResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *PrepareBootResponse) GetChanged() bool {
	if x, ok := x.GetReply().(*PrepareBootResponse_Changed); ok {
		return x.Changed
	}
	return false
}

type isPrepareBootResponse_Reply interface {
	isPrepareBootResponse_Reply()
}

type PrepareBootResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type PrepareBootResponse_Changed struct {
	Changed bool `protobuf:"varint,2,opt,name=changed,proto3,oneof"`
}

func (*PrepareBootResponse_Log) isPrepareBootResponse_Reply() {}

func (*PrepareBootResponse_Changed) isPrepareBootResponse_Reply() {}

type CommitBootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//	*CommitBootResponse_Log
	//	*CommitBootResponse_Changed
	Reply isCommitBootResponse_Reply `protobuf_oneof:"reply"`
}

func (x *CommitBootResponse) Reset() {
	*x = CommitBootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitBootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitBootResponse) ProtoMessage() {}

func (x *CommitBootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitBootResponse.ProtoReflect.Descriptor instead.
func (*CommitBootResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{7}
}

func (m *CommitBootResponse) GetReply() isCommitBootResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *CommitBootResponse) GetLog() string {
	if x, ok := x.GetReply().(*CommitBootResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *CommitBootResponse) GetChanged() bool {
	if x, ok := x.GetReply().(*CommitBootResponse_Changed); ok {
		return x.Changed
	}
	return false
}

type isCommitBootResponse_Reply interface {
	isCommitBootResponse_Reply()
}

type CommitBootResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type CommitBootResponse_Changed struct {
	Changed bool `protobuf:"varint,2,opt,name=changed,proto3,oneof"`
}

func (*CommitBootResponse_Log) isCommitBootResponse_Reply() {}

func (*CommitBootResponse_Changed) isCommitBootResponse_Reply() {}

type UpdateBootMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auto bool `protobuf:"varint,1,opt,name=auto,proto3" json:"auto,omitempty"`
}

func (x *UpdateBootMenuRequest) Reset() {
	*x = UpdateBootMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBootMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBootMenuRequest) ProtoMessage() {}

func (x *UpdateBootMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBootMenuRequest.ProtoReflect.Descriptor instead.
func (*UpdateBootMenuRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateBootMenuRequest) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

type SaveSystemStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateName      string `protobuf:"bytes,1,opt,name=stateName,proto3" json:"stateName,omitempty"`
	UpdateBootMenu bool   `protobuf:"varint,2,opt,name=updateBootMenu,proto3" json:"updateBootMenu,omitempty"`
	Autosave       bool   `protobuf:"varint,3,opt,name=autosave,proto3" json:"autosave,omitempty"`
}

func (x *SaveSystemStateRequest) Reset() {
	*x = SaveSystemStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSystemStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSystemStateRequest) ProtoMessage() {}

func (x *SaveSystemStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSystemStateRequest.ProtoReflect.Descriptor instead.
func (*SaveSystemStateRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{9}
}

func (x *SaveSystemStateRequest) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *SaveSystemStateRequest) GetUpdateBootMenu() bool {
	if x != nil {
		return x.UpdateBootMenu
	}
	return false
}

func (x *SaveSystemStateRequest) GetAutosave() bool {
	if x != nil {
		return x.Autosave
	}
	return false
}

type SaveUserStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName  string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	StateName string `protobuf:"bytes,2,opt,name=stateName,proto3" json:"stateName,omitempty"`
}

func (x *SaveUserStateRequest) Reset() {
	*x = SaveUserStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserStateRequest) ProtoMessage() {}

func (x *SaveUserStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserStateRequest.ProtoReflect.Descriptor instead.
func (*SaveUserStateRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{10}
}

func (x *SaveUserStateRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SaveUserStateRequest) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

type CreateSaveStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//	*CreateSaveStateResponse_Log
	//	*CreateSaveStateResponse_StateName
	Reply isCreateSaveStateResponse_Reply `protobuf_oneof:"reply"`
}

func (x *CreateSaveStateResponse) Reset() {
	*x = CreateSaveStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSaveStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSaveStateResponse) ProtoMessage() {}

func (x *CreateSaveStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSaveStateResponse.ProtoReflect.Descriptor instead.
func (*CreateSaveStateResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{11}
}

func (m *CreateSaveStateResponse) GetReply() isCreateSaveStateResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *CreateSaveStateResponse) GetLog() string {
	if x, ok := x.GetReply().(*CreateSaveStateResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *CreateSaveStateResponse) GetStateName() string {
	if x, ok := x.GetReply().(*CreateSaveStateResponse_StateName); ok {
		return x.StateName
	}
	return ""
}

type isCreateSaveStateResponse_Reply interface {
	isCreateSaveStateResponse_Reply()
}

type CreateSaveStateResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type CreateSaveStateResponse_StateName struct {
	StateName string `protobuf:"bytes,2,opt,name=stateName,proto3,oneof"`
}

func (*CreateSaveStateResponse_Log) isCreateSaveStateResponse_Reply() {}

func (*CreateSaveStateResponse_StateName) isCreateSaveStateResponse_Reply() {}

type RemoveSystemStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateName string `protobuf:"bytes,1,opt,name=stateName,proto3" json:"stateName,omitempty"`
	Force     bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	Dryrun    bool   `protobuf:"varint,3,opt,name=dryrun,proto3" json:"dryrun,omitempty"`
}

func (x *RemoveSystemStateRequest) Reset() {
	*x = RemoveSystemStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSystemStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSystemStateRequest) ProtoMessage() {}

func (x *RemoveSystemStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSystemStateRequest.ProtoReflect.Descriptor instead.
func (*RemoveSystemStateRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveSystemStateRequest) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *RemoveSystemStateRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RemoveSystemStateRequest) GetDryrun() bool {
	if x != nil {
		return x.Dryrun
	}
	return false
}

type RemoveUserStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName  string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	StateName string `protobuf:"bytes,2,opt,name=stateName,proto3" json:"stateName,omitempty"`
	Force     bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Dryrun    bool   `protobuf:"varint,4,opt,name=dryrun,proto3" json:"dryrun,omitempty"`
}

func (x *RemoveUserStateRequest) Reset() {
	*x = RemoveUserStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserStateRequest) ProtoMessage() {}

func (x *RemoveUserStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserStateRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserStateRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveUserStateRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RemoveUserStateRequest) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *RemoveUserStateRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RemoveUserStateRequest) GetDryrun() bool {
	if x != nil {
		return x.Dryrun
	}
	return false
}

type DumpStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//	*DumpStatesResponse_Log
	//	*DumpStatesResponse_States
	Reply isDumpStatesResponse_Reply `protobuf_oneof:"reply"`
}

func (x *DumpStatesResponse) Reset() {
	*x = DumpStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpStatesResponse) ProtoMessage() {}

func (x *DumpStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpStatesResponse.ProtoReflect.Descriptor instead.
func (*DumpStatesResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{14}
}

func (m *DumpStatesResponse) GetReply() isDumpStatesResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *DumpStatesResponse) GetLog() string {
	if x, ok := x.GetReply().(*DumpStatesResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *DumpStatesResponse) GetStates() string {
	if x, ok := x.GetReply().(*DumpStatesResponse_States); ok {
		return x.States
	}
	return ""
}

type isDumpStatesResponse_Reply interface {
	isDumpStatesResponse_Reply()
}

type DumpStatesResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type DumpStatesResponse_States struct {
	States string `protobuf:"bytes,2,opt,name=states,proto3,oneof"`
}

func (*DumpStatesResponse_Log) isDumpStatesResponse_Reply() {}

func (*DumpStatesResponse_States) isDumpStatesResponse_Reply() {}

type LoggingLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logginglevel int32 `protobuf:"varint,1,opt,name=logginglevel,proto3" json:"logginglevel,omitempty"`
}

func (x *LoggingLevelRequest) Reset() {
	*x = LoggingLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingLevelRequest) ProtoMessage() {}

func (x *LoggingLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingLevelRequest.ProtoReflect.Descriptor instead.
func (*LoggingLevelRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{15}
}

func (x *LoggingLevelRequest) GetLogginglevel() int32 {
	if x != nil {
		return x.Logginglevel
	}
	return 0
}

type TraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Duration int32  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *TraceRequest) Reset() {
	*x = TraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRequest) ProtoMessage() {}

func (x *TraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRequest.ProtoReflect.Descriptor instead.
func (*TraceRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{16}
}

func (x *TraceRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TraceRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//	*TraceResponse_Log
	//	*TraceResponse_Trace
	Reply isTraceResponse_Reply `protobuf_oneof:"reply"`
}

func (x *TraceResponse) Reset() {
	*x = TraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceResponse) ProtoMessage() {}

func (x *TraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceResponse.ProtoReflect.Descriptor instead.
func (*TraceResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{17}
}

func (m *TraceResponse) GetReply() isTraceResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *TraceResponse) GetLog() string {
	if x, ok := x.GetReply().(*TraceResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *TraceResponse) GetTrace() []byte {
	if x, ok := x.GetReply().(*TraceResponse_Trace); ok {
		return x.Trace
	}
	return nil
}

type isTraceResponse_Reply interface {
	isTraceResponse_Reply()
}

type TraceResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type TraceResponse_Trace struct {
	Trace []byte `protobuf:"bytes,2,opt,name=trace,proto3,oneof"`
}

func (*TraceResponse_Log) isTraceResponse_Reply() {}

func (*TraceResponse_Trace) isTraceResponse_Reply() {}

type GCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *GCRequest) Reset() {
	*x = GCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCRequest) ProtoMessage() {}

func (x *GCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCRequest.ProtoReflect.Descriptor instead.
func (*GCRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{18}
}

func (x *GCRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type MachineShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineId string `protobuf:"bytes,1,opt,name=machineId,proto3" json:"machineId,omitempty"`
	Full      bool   `protobuf:"varint,2,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *MachineShowRequest) Reset() {
	*x = MachineShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineShowRequest) ProtoMessage() {}

func (x *MachineShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineShowRequest.ProtoReflect.Descriptor instead.
func (*MachineShowRequest) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{19}
}

func (x *MachineShowRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *MachineShowRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type MachineShowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//	*MachineShowResponse_Log
	//	*MachineShowResponse_MachineInfo
	Reply isMachineShowResponse_Reply `protobuf_oneof:"reply"`
}

func (x *MachineShowResponse) Reset() {
	*x = MachineShowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineShowResponse) ProtoMessage() {}

func (x *MachineShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineShowResponse.ProtoReflect.Descriptor instead.
func (*MachineShowResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{20}
}

func (m *MachineShowResponse) GetReply() isMachineShowResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *MachineShowResponse) GetLog() string {
	if x, ok := x.GetReply().(*MachineShowResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *MachineShowResponse) GetMachineInfo() string {
	if x, ok := x.GetReply().(*MachineShowResponse_MachineInfo); ok {
		return x.MachineInfo
	}
	return ""
}

type isMachineShowResponse_Reply interface {
	isMachineShowResponse_Reply()
}

type MachineShowResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type MachineShowResponse_MachineInfo struct {
	MachineInfo string `protobuf:"bytes,2,opt,name=machineInfo,proto3,oneof"`
}

func (*MachineShowResponse_Log) isMachineShowResponse_Reply() {}

func (*MachineShowResponse_MachineInfo) isMachineShowResponse_Reply() {}

type MachineListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//	*MachineListResponse_Log
	//	*MachineListResponse_MachineList
	Reply isMachineListResponse_Reply `protobuf_oneof:"reply"`
}

func (x *MachineListResponse) Reset() {
	*x = MachineListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zsys_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineListResponse) ProtoMessage() {}

func (x *MachineListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zsys_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineListResponse.ProtoReflect.Descriptor instead.
func (*MachineListResponse) Descriptor() ([]byte, []int) {
	return file_zsys_proto_rawDescGZIP(), []int{21}
}

func (m *MachineListResponse) GetReply() isMachineListResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *MachineListResponse) GetLog() string {
	if x, ok := x.GetReply().(*MachineListResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *MachineListResponse) GetMachineList() string {
	if x, ok := x.GetReply().(*MachineListResponse_MachineList); ok {
		return x.MachineList
	}
	return ""
}

type isMachineListResponse_Reply interface {
	isMachineListResponse_Reply()
}

type MachineListResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type MachineListResponse_MachineList struct {
	MachineList string `protobuf:"bytes,2,opt,name=machineList,proto3,oneof"`
}

func (*MachineListResponse_Log) isMachineListResponse_Reply() {}

func (*MachineListResponse_MachineList) isMachineListResponse_Reply() {}

var File_zsys_proto protoreflect.FileDescriptor

var file_zsys_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x7a, 0x73,
	0x79, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x4a, 0x0a, 0x0f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x47, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x4b, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x4f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x48, 0x6f, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x48, 0x6f, 0x6d, 0x65, 0x22, 0x4b,
	0x0a, 0x15, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4d, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x6e,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x61, 0x76, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x66, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64,
	0x72, 0x79, 0x72, 0x75, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x22, 0x4b, 0x0a, 0x12, 0x44, 0x75, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6c,
	0x6f, 0x67, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x3e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x44, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x0a, 0x09, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0x46, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22, 0x56, 0x0a,
	0x13, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x22, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x56, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67,
	0x12, 0x22, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xb2, 0x0a,
	0x0a, 0x04, 0x5a, 0x73, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15,
	0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x7a, 0x73, 0x79, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e,
	0x7a, 0x73, 0x79, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79,
	0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x37, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x0b,
	0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x7a, 0x73,
	0x79, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x0b, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x42, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x1b, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x7a, 0x73, 0x79,
	0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x53, 0x61, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x7a, 0x73, 0x79,
	0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x7a,
	0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x7a,
	0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x18, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x2e,
	0x0a, 0x0a, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x7a,
	0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3e,
	0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19,
	0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x2b,
	0x0a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x0b, 0x2e, 0x7a, 0x73, 0x79, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x7a, 0x73, 0x79, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x2a, 0x0a, 0x06, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0b, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x11, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x2a, 0x0a, 0x02, 0x47, 0x43, 0x12, 0x0f, 0x2e,
	0x7a, 0x73, 0x79, 0x73, 0x2e, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x12, 0x18, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x7a,
	0x73, 0x79, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0b, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x7a, 0x73, 0x79, 0x73, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zsys_proto_rawDescOnce sync.Once
	file_zsys_proto_rawDescData = file_zsys_proto_rawDesc
)

func file_zsys_proto_rawDescGZIP() []byte {
	file_zsys_proto_rawDescOnce.Do(func() {
		file_zsys_proto_rawDescData = protoimpl.X.CompressGZIP(file_zsys_proto_rawDescData)
	})
	return file_zsys_proto_rawDescData
}

var file_zsys_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_zsys_proto_goTypes = []interface{}{
	(*Empty)(nil),                       // 0: zsys.Empty
	(*LogResponse)(nil),                 // 1: zsys.LogResponse
	(*VersionResponse)(nil),             // 2: zsys.VersionResponse
	(*CreateUserDataRequest)(nil),       // 3: zsys.CreateUserDataRequest
	(*ChangeHomeOnUserDataRequest)(nil), // 4: zsys.ChangeHomeOnUserDataRequest
	(*DissociateUserRequest)(nil),       // 5: zsys.DissociateUserRequest
	(*PrepareBootResponse)(nil),         // 6: zsys.PrepareBootResponse
	(*CommitBootResponse)(nil),          // 7: zsys.CommitBootResponse
	(*UpdateBootMenuRequest)(nil),       // 8: zsys.UpdateBootMenuRequest
	(*SaveSystemStateRequest)(nil),      // 9: zsys.SaveSystemStateRequest
	(*SaveUserStateRequest)(nil),        // 10: zsys.SaveUserStateRequest
	(*CreateSaveStateResponse)(nil),     // 11: zsys.CreateSaveStateResponse
	(*RemoveSystemStateRequest)(nil),    // 12: zsys.RemoveSystemStateRequest
	(*RemoveUserStateRequest)(nil),      // 13: zsys.RemoveUserStateRequest
	(*DumpStatesResponse)(nil),          // 14: zsys.DumpStatesResponse
	(*LoggingLevelRequest)(nil),         // 15: zsys.LoggingLevelRequest
	(*TraceRequest)(nil),                // 16: zsys.TraceRequest
	(*TraceResponse)(nil),               // 17: zsys.TraceResponse
	(*GCRequest)(nil),                   // 18: zsys.GCRequest
	(*MachineShowRequest)(nil),          // 19: zsys.MachineShowRequest
	(*MachineShowResponse)(nil),         // 20: zsys.MachineShowResponse
	(*MachineListResponse)(nil),         // 21: zsys.MachineListResponse
}
var file_zsys_proto_depIdxs = []int32{
	0,  // 0: zsys.Zsys.Version:input_type -> zsys.Empty
	3,  // 1: zsys.Zsys.CreateUserData:input_type -> zsys.CreateUserDataRequest
	4,  // 2: zsys.Zsys.ChangeHomeOnUserData:input_type -> zsys.ChangeHomeOnUserDataRequest
	5,  // 3: zsys.Zsys.DissociateUser:input_type -> zsys.DissociateUserRequest
	0,  // 4: zsys.Zsys.PrepareBoot:input_type -> zsys.Empty
	0,  // 5: zsys.Zsys.CommitBoot:input_type -> zsys.Empty
	8,  // 6: zsys.Zsys.UpdateBootMenu:input_type -> zsys.UpdateBootMenuRequest
	0,  // 7: zsys.Zsys.UpdateLastUsed:input_type -> zsys.Empty
	9,  // 8: zsys.Zsys.SaveSystemState:input_type -> zsys.SaveSystemStateRequest
	10, // 9: zsys.Zsys.SaveUserState:input_type -> zsys.SaveUserStateRequest
	12, // 10: zsys.Zsys.RemoveSystemState:input_type -> zsys.RemoveSystemStateRequest
	13, // 11: zsys.Zsys.RemoveUserState:input_type -> zsys.RemoveUserStateRequest
	0,  // 12: zsys.Zsys.DumpStates:input_type -> zsys.Empty
	0,  // 13: zsys.Zsys.DaemonStop:input_type -> zsys.Empty
	15, // 14: zsys.Zsys.LoggingLevel:input_type -> zsys.LoggingLevelRequest
	0,  // 15: zsys.Zsys.Refresh:input_type -> zsys.Empty
	16, // 16: zsys.Zsys.Trace:input_type -> zsys.TraceRequest
	0,  // 17: zsys.Zsys.Status:input_type -> zsys.Empty
	0,  // 18: zsys.Zsys.Reload:input_type -> zsys.Empty
	18, // 19: zsys.Zsys.GC:input_type -> zsys.GCRequest
	19, // 20: zsys.Zsys.MachineShow:input_type -> zsys.MachineShowRequest
	0,  // 21: zsys.Zsys.MachineList:input_type -> zsys.Empty
	2,  // 22: zsys.Zsys.Version:output_type -> zsys.VersionResponse
	1,  // 23: zsys.Zsys.CreateUserData:output_type -> zsys.LogResponse
	1,  // 24: zsys.Zsys.ChangeHomeOnUserData:output_type -> zsys.LogResponse
	1,  // 25: zsys.Zsys.DissociateUser:output_type -> zsys.LogResponse
	6,  // 26: zsys.Zsys.PrepareBoot:output_type -> zsys.PrepareBootResponse
	7,  // 27: zsys.Zsys.CommitBoot:output_type -> zsys.CommitBootResponse
	1,  // 28: zsys.Zsys.UpdateBootMenu:output_type -> zsys.LogResponse
	1,  // 29: zsys.Zsys.UpdateLastUsed:output_type -> zsys.LogResponse
	11, // 30: zsys.Zsys.SaveSystemState:output_type -> zsys.CreateSaveStateResponse
	11, // 31: zsys.Zsys.SaveUserState:output_type -> zsys.CreateSaveStateResponse
	1,  // 32: zsys.Zsys.RemoveSystemState:output_type -> zsys.LogResponse
	1,  // 33: zsys.Zsys.RemoveUserState:output_type -> zsys.LogResponse
	14, // 34: zsys.Zsys.DumpStates:output_type -> zsys.DumpStatesResponse
	1,  // 35: zsys.Zsys.DaemonStop:output_type -> zsys.LogResponse
	1,  // 36: zsys.Zsys.LoggingLevel:output_type -> zsys.LogResponse
	1,  // 37: zsys.Zsys.Refresh:output_type -> zsys.LogResponse
	17, // 38: zsys.Zsys.Trace:output_type -> zsys.TraceResponse
	1,  // 39: zsys.Zsys.Status:output_type -> zsys.LogResponse
	1,  // 40: zsys.Zsys.Reload:output_type -> zsys.LogResponse
	1,  // 41: zsys.Zsys.GC:output_type -> zsys.LogResponse
	20, // 42: zsys.Zsys.MachineShow:output_type -> zsys.MachineShowResponse
	21, // 43: zsys.Zsys.MachineList:output_type -> zsys.MachineListResponse
	22, // [22:44] is the sub-list for method output_type
	0,  // [0:22] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_zsys_proto_init() }
func file_zsys_proto_init() {
	if File_zsys_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zsys_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeHomeOnUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DissociateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareBootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitBootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBootMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSystemStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSaveStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSystemStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineShowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zsys_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zsys_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*VersionResponse_Log)(nil),
		(*VersionResponse_Version)(nil),
	}
	file_zsys_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PrepareBootResponse_Log)(nil),
		(*PrepareBootResponse_Changed)(nil),
	}
	file_zsys_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*CommitBootResponse_Log)(nil),
		(*CommitBootResponse_Changed)(nil),
	}
	file_zsys_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*CreateSaveStateResponse_Log)(nil),
		(*CreateSaveStateResponse_StateName)(nil),
	}
	file_zsys_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*DumpStatesResponse_Log)(nil),
		(*DumpStatesResponse_States)(nil),
	}
	file_zsys_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*TraceResponse_Log)(nil),
		(*TraceResponse_Trace)(nil),
	}
	file_zsys_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*MachineShowResponse_Log)(nil),
		(*MachineShowResponse_MachineInfo)(nil),
	}
	file_zsys_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*MachineListResponse_Log)(nil),
		(*MachineListResponse_MachineList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zsys_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zsys_proto_goTypes,
		DependencyIndexes: file_zsys_proto_depIdxs,
		MessageInfos:      file_zsys_proto_msgTypes,
	}.Build()
	File_zsys_proto = out.File
	file_zsys_proto_rawDesc = nil
	file_zsys_proto_goTypes = nil
	file_zsys_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZsysClient is the client API for Zsys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZsysClient interface {
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_VersionClient, error)
	CreateUserData(ctx context.Context, in *CreateUserDataRequest, opts ...grpc.CallOption) (Zsys_CreateUserDataClient, error)
	ChangeHomeOnUserData(ctx context.Context, in *ChangeHomeOnUserDataRequest, opts ...grpc.CallOption) (Zsys_ChangeHomeOnUserDataClient, error)
	DissociateUser(ctx context.Context, in *DissociateUserRequest, opts ...grpc.CallOption) (Zsys_DissociateUserClient, error)
	PrepareBoot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_PrepareBootClient, error)
	CommitBoot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_CommitBootClient, error)
	UpdateBootMenu(ctx context.Context, in *UpdateBootMenuRequest, opts ...grpc.CallOption) (Zsys_UpdateBootMenuClient, error)
	UpdateLastUsed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_UpdateLastUsedClient, error)
	SaveSystemState(ctx context.Context, in *SaveSystemStateRequest, opts ...grpc.CallOption) (Zsys_SaveSystemStateClient, error)
	SaveUserState(ctx context.Context, in *SaveUserStateRequest, opts ...grpc.CallOption) (Zsys_SaveUserStateClient, error)
	RemoveSystemState(ctx context.Context, in *RemoveSystemStateRequest, opts ...grpc.CallOption) (Zsys_RemoveSystemStateClient, error)
	RemoveUserState(ctx context.Context, in *RemoveUserStateRequest, opts ...grpc.CallOption) (Zsys_RemoveUserStateClient, error)
	DumpStates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_DumpStatesClient, error)
	DaemonStop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_DaemonStopClient, error)
	LoggingLevel(ctx context.Context, in *LoggingLevelRequest, opts ...grpc.CallOption) (Zsys_LoggingLevelClient, error)
	Refresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_RefreshClient, error)
	Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (Zsys_TraceClient, error)
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_StatusClient, error)
	Reload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_ReloadClient, error)
	GC(ctx context.Context, in *GCRequest, opts ...grpc.CallOption) (Zsys_GCClient, error)
	MachineShow(ctx context.Context, in *MachineShowRequest, opts ...grpc.CallOption) (Zsys_MachineShowClient, error)
	MachineList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_MachineListClient, error)
}

type zsysClient struct {
	cc grpc.ClientConnInterface
}

func NewZsysClient(cc grpc.ClientConnInterface) ZsysClient {
	return &zsysClient{cc}
}

func (c *zsysClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_VersionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[0], "/zsys.Zsys/Version", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_VersionClient interface {
	Recv() (*VersionResponse, error)
	grpc.ClientStream
}

type zsysVersionClient struct {
	grpc.ClientStream
}

func (x *zsysVersionClient) Recv() (*VersionResponse, error) {
	m := new(VersionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) CreateUserData(ctx context.Context, in *CreateUserDataRequest, opts ...grpc.CallOption) (Zsys_CreateUserDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[1], "/zsys.Zsys/CreateUserData", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysCreateUserDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_CreateUserDataClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysCreateUserDataClient struct {
	grpc.ClientStream
}

func (x *zsysCreateUserDataClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) ChangeHomeOnUserData(ctx context.Context, in *ChangeHomeOnUserDataRequest, opts ...grpc.CallOption) (Zsys_ChangeHomeOnUserDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[2], "/zsys.Zsys/ChangeHomeOnUserData", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysChangeHomeOnUserDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_ChangeHomeOnUserDataClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysChangeHomeOnUserDataClient struct {
	grpc.ClientStream
}

func (x *zsysChangeHomeOnUserDataClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) DissociateUser(ctx context.Context, in *DissociateUserRequest, opts ...grpc.CallOption) (Zsys_DissociateUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[3], "/zsys.Zsys/DissociateUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysDissociateUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_DissociateUserClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysDissociateUserClient struct {
	grpc.ClientStream
}

func (x *zsysDissociateUserClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) PrepareBoot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_PrepareBootClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[4], "/zsys.Zsys/PrepareBoot", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysPrepareBootClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_PrepareBootClient interface {
	Recv() (*PrepareBootResponse, error)
	grpc.ClientStream
}

type zsysPrepareBootClient struct {
	grpc.ClientStream
}

func (x *zsysPrepareBootClient) Recv() (*PrepareBootResponse, error) {
	m := new(PrepareBootResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) CommitBoot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_CommitBootClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[5], "/zsys.Zsys/CommitBoot", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysCommitBootClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_CommitBootClient interface {
	Recv() (*CommitBootResponse, error)
	grpc.ClientStream
}

type zsysCommitBootClient struct {
	grpc.ClientStream
}

func (x *zsysCommitBootClient) Recv() (*CommitBootResponse, error) {
	m := new(CommitBootResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) UpdateBootMenu(ctx context.Context, in *UpdateBootMenuRequest, opts ...grpc.CallOption) (Zsys_UpdateBootMenuClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[6], "/zsys.Zsys/UpdateBootMenu", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysUpdateBootMenuClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_UpdateBootMenuClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysUpdateBootMenuClient struct {
	grpc.ClientStream
}

func (x *zsysUpdateBootMenuClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) UpdateLastUsed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_UpdateLastUsedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[7], "/zsys.Zsys/UpdateLastUsed", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysUpdateLastUsedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_UpdateLastUsedClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysUpdateLastUsedClient struct {
	grpc.ClientStream
}

func (x *zsysUpdateLastUsedClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) SaveSystemState(ctx context.Context, in *SaveSystemStateRequest, opts ...grpc.CallOption) (Zsys_SaveSystemStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[8], "/zsys.Zsys/SaveSystemState", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysSaveSystemStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_SaveSystemStateClient interface {
	Recv() (*CreateSaveStateResponse, error)
	grpc.ClientStream
}

type zsysSaveSystemStateClient struct {
	grpc.ClientStream
}

func (x *zsysSaveSystemStateClient) Recv() (*CreateSaveStateResponse, error) {
	m := new(CreateSaveStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) SaveUserState(ctx context.Context, in *SaveUserStateRequest, opts ...grpc.CallOption) (Zsys_SaveUserStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[9], "/zsys.Zsys/SaveUserState", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysSaveUserStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_SaveUserStateClient interface {
	Recv() (*CreateSaveStateResponse, error)
	grpc.ClientStream
}

type zsysSaveUserStateClient struct {
	grpc.ClientStream
}

func (x *zsysSaveUserStateClient) Recv() (*CreateSaveStateResponse, error) {
	m := new(CreateSaveStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) RemoveSystemState(ctx context.Context, in *RemoveSystemStateRequest, opts ...grpc.CallOption) (Zsys_RemoveSystemStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[10], "/zsys.Zsys/RemoveSystemState", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysRemoveSystemStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_RemoveSystemStateClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysRemoveSystemStateClient struct {
	grpc.ClientStream
}

func (x *zsysRemoveSystemStateClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) RemoveUserState(ctx context.Context, in *RemoveUserStateRequest, opts ...grpc.CallOption) (Zsys_RemoveUserStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[11], "/zsys.Zsys/RemoveUserState", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysRemoveUserStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_RemoveUserStateClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysRemoveUserStateClient struct {
	grpc.ClientStream
}

func (x *zsysRemoveUserStateClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) DumpStates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_DumpStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[12], "/zsys.Zsys/DumpStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysDumpStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_DumpStatesClient interface {
	Recv() (*DumpStatesResponse, error)
	grpc.ClientStream
}

type zsysDumpStatesClient struct {
	grpc.ClientStream
}

func (x *zsysDumpStatesClient) Recv() (*DumpStatesResponse, error) {
	m := new(DumpStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) DaemonStop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_DaemonStopClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[13], "/zsys.Zsys/DaemonStop", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysDaemonStopClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_DaemonStopClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysDaemonStopClient struct {
	grpc.ClientStream
}

func (x *zsysDaemonStopClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) LoggingLevel(ctx context.Context, in *LoggingLevelRequest, opts ...grpc.CallOption) (Zsys_LoggingLevelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[14], "/zsys.Zsys/LoggingLevel", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysLoggingLevelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_LoggingLevelClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysLoggingLevelClient struct {
	grpc.ClientStream
}

func (x *zsysLoggingLevelClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) Refresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_RefreshClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[15], "/zsys.Zsys/Refresh", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysRefreshClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_RefreshClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysRefreshClient struct {
	grpc.ClientStream
}

func (x *zsysRefreshClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (Zsys_TraceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[16], "/zsys.Zsys/Trace", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_TraceClient interface {
	Recv() (*TraceResponse, error)
	grpc.ClientStream
}

type zsysTraceClient struct {
	grpc.ClientStream
}

func (x *zsysTraceClient) Recv() (*TraceResponse, error) {
	m := new(TraceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_StatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[17], "/zsys.Zsys/Status", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_StatusClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysStatusClient struct {
	grpc.ClientStream
}

func (x *zsysStatusClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) Reload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_ReloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[18], "/zsys.Zsys/Reload", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysReloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_ReloadClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysReloadClient struct {
	grpc.ClientStream
}

func (x *zsysReloadClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) GC(ctx context.Context, in *GCRequest, opts ...grpc.CallOption) (Zsys_GCClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[19], "/zsys.Zsys/GC", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysGCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_GCClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type zsysGCClient struct {
	grpc.ClientStream
}

func (x *zsysGCClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) MachineShow(ctx context.Context, in *MachineShowRequest, opts ...grpc.CallOption) (Zsys_MachineShowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[20], "/zsys.Zsys/MachineShow", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysMachineShowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_MachineShowClient interface {
	Recv() (*MachineShowResponse, error)
	grpc.ClientStream
}

type zsysMachineShowClient struct {
	grpc.ClientStream
}

func (x *zsysMachineShowClient) Recv() (*MachineShowResponse, error) {
	m := new(MachineShowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zsysClient) MachineList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Zsys_MachineListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zsys_serviceDesc.Streams[21], "/zsys.Zsys/MachineList", opts...)
	if err != nil {
		return nil, err
	}
	x := &zsysMachineListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zsys_MachineListClient interface {
	Recv() (*MachineListResponse, error)
	grpc.ClientStream
}

type zsysMachineListClient struct {
	grpc.ClientStream
}

func (x *zsysMachineListClient) Recv() (*MachineListResponse, error) {
	m := new(MachineListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZsysServer is the server API for Zsys service.
type ZsysServer interface {
	Version(*Empty, Zsys_VersionServer) error
	CreateUserData(*CreateUserDataRequest, Zsys_CreateUserDataServer) error
	ChangeHomeOnUserData(*ChangeHomeOnUserDataRequest, Zsys_ChangeHomeOnUserDataServer) error
	DissociateUser(*DissociateUserRequest, Zsys_DissociateUserServer) error
	PrepareBoot(*Empty, Zsys_PrepareBootServer) error
	CommitBoot(*Empty, Zsys_CommitBootServer) error
	UpdateBootMenu(*UpdateBootMenuRequest, Zsys_UpdateBootMenuServer) error
	UpdateLastUsed(*Empty, Zsys_UpdateLastUsedServer) error
	SaveSystemState(*SaveSystemStateRequest, Zsys_SaveSystemStateServer) error
	SaveUserState(*SaveUserStateRequest, Zsys_SaveUserStateServer) error
	RemoveSystemState(*RemoveSystemStateRequest, Zsys_RemoveSystemStateServer) error
	RemoveUserState(*RemoveUserStateRequest, Zsys_RemoveUserStateServer) error
	DumpStates(*Empty, Zsys_DumpStatesServer) error
	DaemonStop(*Empty, Zsys_DaemonStopServer) error
	LoggingLevel(*LoggingLevelRequest, Zsys_LoggingLevelServer) error
	Refresh(*Empty, Zsys_RefreshServer) error
	Trace(*TraceRequest, Zsys_TraceServer) error
	Status(*Empty, Zsys_StatusServer) error
	Reload(*Empty, Zsys_ReloadServer) error
	GC(*GCRequest, Zsys_GCServer) error
	MachineShow(*MachineShowRequest, Zsys_MachineShowServer) error
	MachineList(*Empty, Zsys_MachineListServer) error
}

// UnimplementedZsysServer can be embedded to have forward compatible implementations.
type UnimplementedZsysServer struct {
}

func (*UnimplementedZsysServer) Version(*Empty, Zsys_VersionServer) error {
	return status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedZsysServer) CreateUserData(*CreateUserDataRequest, Zsys_CreateUserDataServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUserData not implemented")
}
func (*UnimplementedZsysServer) ChangeHomeOnUserData(*ChangeHomeOnUserDataRequest, Zsys_ChangeHomeOnUserDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ChangeHomeOnUserData not implemented")
}
func (*UnimplementedZsysServer) DissociateUser(*DissociateUserRequest, Zsys_DissociateUserServer) error {
	return status.Errorf(codes.Unimplemented, "method DissociateUser not implemented")
}
func (*UnimplementedZsysServer) PrepareBoot(*Empty, Zsys_PrepareBootServer) error {
	return status.Errorf(codes.Unimplemented, "method PrepareBoot not implemented")
}
func (*UnimplementedZsysServer) CommitBoot(*Empty, Zsys_CommitBootServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitBoot not implemented")
}
func (*UnimplementedZsysServer) UpdateBootMenu(*UpdateBootMenuRequest, Zsys_UpdateBootMenuServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateBootMenu not implemented")
}
func (*UnimplementedZsysServer) UpdateLastUsed(*Empty, Zsys_UpdateLastUsedServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateLastUsed not implemented")
}
func (*UnimplementedZsysServer) SaveSystemState(*SaveSystemStateRequest, Zsys_SaveSystemStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveSystemState not implemented")
}
func (*UnimplementedZsysServer) SaveUserState(*SaveUserStateRequest, Zsys_SaveUserStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveUserState not implemented")
}
func (*UnimplementedZsysServer) RemoveSystemState(*RemoveSystemStateRequest, Zsys_RemoveSystemStateServer) error {
	return status.Errorf(codes.Unimplemented, "method RemoveSystemState not implemented")
}
func (*UnimplementedZsysServer) RemoveUserState(*RemoveUserStateRequest, Zsys_RemoveUserStateServer) error {
	return status.Errorf(codes.Unimplemented, "method RemoveUserState not implemented")
}
func (*UnimplementedZsysServer) DumpStates(*Empty, Zsys_DumpStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method DumpStates not implemented")
}
func (*UnimplementedZsysServer) DaemonStop(*Empty, Zsys_DaemonStopServer) error {
	return status.Errorf(codes.Unimplemented, "method DaemonStop not implemented")
}
func (*UnimplementedZsysServer) LoggingLevel(*LoggingLevelRequest, Zsys_LoggingLevelServer) error {
	return status.Errorf(codes.Unimplemented, "method LoggingLevel not implemented")
}
func (*UnimplementedZsysServer) Refresh(*Empty, Zsys_RefreshServer) error {
	return status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedZsysServer) Trace(*TraceRequest, Zsys_TraceServer) error {
	return status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (*UnimplementedZsysServer) Status(*Empty, Zsys_StatusServer) error {
	return status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedZsysServer) Reload(*Empty, Zsys_ReloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (*UnimplementedZsysServer) GC(*GCRequest, Zsys_GCServer) error {
	return status.Errorf(codes.Unimplemented, "method GC not implemented")
}
func (*UnimplementedZsysServer) MachineShow(*MachineShowRequest, Zsys_MachineShowServer) error {
	return status.Errorf(codes.Unimplemented, "method MachineShow not implemented")
}
func (*UnimplementedZsysServer) MachineList(*Empty, Zsys_MachineListServer) error {
	return status.Errorf(codes.Unimplemented, "method MachineList not implemented")
}

func RegisterZsysServer(s *grpc.Server, srv ZsysServer) {
	s.RegisterService(&_Zsys_serviceDesc, srv)
}

func _Zsys_Version_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).Version(m, &zsysVersionServer{stream})
}

type Zsys_VersionServer interface {
	Send(*VersionResponse) error
	grpc.ServerStream
}

type zsysVersionServer struct {
	grpc.ServerStream
}

func (x *zsysVersionServer) Send(m *VersionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_CreateUserData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateUserDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).CreateUserData(m, &zsysCreateUserDataServer{stream})
}

type Zsys_CreateUserDataServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysCreateUserDataServer struct {
	grpc.ServerStream
}

func (x *zsysCreateUserDataServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_ChangeHomeOnUserData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangeHomeOnUserDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).ChangeHomeOnUserData(m, &zsysChangeHomeOnUserDataServer{stream})
}

type Zsys_ChangeHomeOnUserDataServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysChangeHomeOnUserDataServer struct {
	grpc.ServerStream
}

func (x *zsysChangeHomeOnUserDataServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_DissociateUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DissociateUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).DissociateUser(m, &zsysDissociateUserServer{stream})
}

type Zsys_DissociateUserServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysDissociateUserServer struct {
	grpc.ServerStream
}

func (x *zsysDissociateUserServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_PrepareBoot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).PrepareBoot(m, &zsysPrepareBootServer{stream})
}

type Zsys_PrepareBootServer interface {
	Send(*PrepareBootResponse) error
	grpc.ServerStream
}

type zsysPrepareBootServer struct {
	grpc.ServerStream
}

func (x *zsysPrepareBootServer) Send(m *PrepareBootResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_CommitBoot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).CommitBoot(m, &zsysCommitBootServer{stream})
}

type Zsys_CommitBootServer interface {
	Send(*CommitBootResponse) error
	grpc.ServerStream
}

type zsysCommitBootServer struct {
	grpc.ServerStream
}

func (x *zsysCommitBootServer) Send(m *CommitBootResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_UpdateBootMenu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateBootMenuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).UpdateBootMenu(m, &zsysUpdateBootMenuServer{stream})
}

type Zsys_UpdateBootMenuServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysUpdateBootMenuServer struct {
	grpc.ServerStream
}

func (x *zsysUpdateBootMenuServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_UpdateLastUsed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).UpdateLastUsed(m, &zsysUpdateLastUsedServer{stream})
}

type Zsys_UpdateLastUsedServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysUpdateLastUsedServer struct {
	grpc.ServerStream
}

func (x *zsysUpdateLastUsedServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_SaveSystemState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SaveSystemStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).SaveSystemState(m, &zsysSaveSystemStateServer{stream})
}

type Zsys_SaveSystemStateServer interface {
	Send(*CreateSaveStateResponse) error
	grpc.ServerStream
}

type zsysSaveSystemStateServer struct {
	grpc.ServerStream
}

func (x *zsysSaveSystemStateServer) Send(m *CreateSaveStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_SaveUserState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SaveUserStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).SaveUserState(m, &zsysSaveUserStateServer{stream})
}

type Zsys_SaveUserStateServer interface {
	Send(*CreateSaveStateResponse) error
	grpc.ServerStream
}

type zsysSaveUserStateServer struct {
	grpc.ServerStream
}

func (x *zsysSaveUserStateServer) Send(m *CreateSaveStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_RemoveSystemState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveSystemStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).RemoveSystemState(m, &zsysRemoveSystemStateServer{stream})
}

type Zsys_RemoveSystemStateServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysRemoveSystemStateServer struct {
	grpc.ServerStream
}

func (x *zsysRemoveSystemStateServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_RemoveUserState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveUserStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).RemoveUserState(m, &zsysRemoveUserStateServer{stream})
}

type Zsys_RemoveUserStateServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysRemoveUserStateServer struct {
	grpc.ServerStream
}

func (x *zsysRemoveUserStateServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_DumpStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).DumpStates(m, &zsysDumpStatesServer{stream})
}

type Zsys_DumpStatesServer interface {
	Send(*DumpStatesResponse) error
	grpc.ServerStream
}

type zsysDumpStatesServer struct {
	grpc.ServerStream
}

func (x *zsysDumpStatesServer) Send(m *DumpStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_DaemonStop_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).DaemonStop(m, &zsysDaemonStopServer{stream})
}

type Zsys_DaemonStopServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysDaemonStopServer struct {
	grpc.ServerStream
}

func (x *zsysDaemonStopServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_LoggingLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoggingLevelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).LoggingLevel(m, &zsysLoggingLevelServer{stream})
}

type Zsys_LoggingLevelServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysLoggingLevelServer struct {
	grpc.ServerStream
}

func (x *zsysLoggingLevelServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_Refresh_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).Refresh(m, &zsysRefreshServer{stream})
}

type Zsys_RefreshServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysRefreshServer struct {
	grpc.ServerStream
}

func (x *zsysRefreshServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_Trace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).Trace(m, &zsysTraceServer{stream})
}

type Zsys_TraceServer interface {
	Send(*TraceResponse) error
	grpc.ServerStream
}

type zsysTraceServer struct {
	grpc.ServerStream
}

func (x *zsysTraceServer) Send(m *TraceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).Status(m, &zsysStatusServer{stream})
}

type Zsys_StatusServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysStatusServer struct {
	grpc.ServerStream
}

func (x *zsysStatusServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_Reload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).Reload(m, &zsysReloadServer{stream})
}

type Zsys_ReloadServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysReloadServer struct {
	grpc.ServerStream
}

func (x *zsysReloadServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_GC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GCRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).GC(m, &zsysGCServer{stream})
}

type Zsys_GCServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type zsysGCServer struct {
	grpc.ServerStream
}

func (x *zsysGCServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_MachineShow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MachineShowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).MachineShow(m, &zsysMachineShowServer{stream})
}

type Zsys_MachineShowServer interface {
	Send(*MachineShowResponse) error
	grpc.ServerStream
}

type zsysMachineShowServer struct {
	grpc.ServerStream
}

func (x *zsysMachineShowServer) Send(m *MachineShowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Zsys_MachineList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZsysServer).MachineList(m, &zsysMachineListServer{stream})
}

type Zsys_MachineListServer interface {
	Send(*MachineListResponse) error
	grpc.ServerStream
}

type zsysMachineListServer struct {
	grpc.ServerStream
}

func (x *zsysMachineListServer) Send(m *MachineListResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Zsys_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zsys.Zsys",
	HandlerType: (*ZsysServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Version",
			Handler:       _Zsys_Version_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateUserData",
			Handler:       _Zsys_CreateUserData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChangeHomeOnUserData",
			Handler:       _Zsys_ChangeHomeOnUserData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DissociateUser",
			Handler:       _Zsys_DissociateUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PrepareBoot",
			Handler:       _Zsys_PrepareBoot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CommitBoot",
			Handler:       _Zsys_CommitBoot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateBootMenu",
			Handler:       _Zsys_UpdateBootMenu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateLastUsed",
			Handler:       _Zsys_UpdateLastUsed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveSystemState",
			Handler:       _Zsys_SaveSystemState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveUserState",
			Handler:       _Zsys_SaveUserState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoveSystemState",
			Handler:       _Zsys_RemoveSystemState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoveUserState",
			Handler:       _Zsys_RemoveUserState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DumpStates",
			Handler:       _Zsys_DumpStates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DaemonStop",
			Handler:       _Zsys_DaemonStop_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LoggingLevel",
			Handler:       _Zsys_LoggingLevel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Refresh",
			Handler:       _Zsys_Refresh_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Trace",
			Handler:       _Zsys_Trace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Status",
			Handler:       _Zsys_Status_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Reload",
			Handler:       _Zsys_Reload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GC",
			Handler:       _Zsys_GC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MachineShow",
			Handler:       _Zsys_MachineShow_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MachineList",
			Handler:       _Zsys_MachineList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zsys.proto",
}
